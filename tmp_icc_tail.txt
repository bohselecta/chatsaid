           ${isExpanded ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}
         `}>
           <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900 dark:to-purple-900 border-t border-blue-200 dark:border-blue-600 shadow-xl rounded-b-xl">
            {/* Collection Description */}
            <div className="mb-3 text-blue-700 dark:text-blue-300">
              <div className="flex items-center space-x-2">
                <img 
                  src="/pick-large.png"
                  alt="Pick cherry icon"
                  className="w-6 h-6 object-contain"
                />
                <div 
                  style={{ 
                    fontSize: '0.8125rem',
                    lineHeight: '1.45'
                  }}
                >
                  <strong>Pick cherries for your personal collection!</strong> Your AI companion will analyze and learn from content you save.
                </div>
              </div>
            </div>

            {/* Personal Collection Dock (Compact Style) */}
            <div className="grid grid-cols-1 gap-2 mb-4">
              {personalCategories.map((category) => {
                const isSaved = userSavedCategories.includes(category.id);
                
                return (
                  <button
                    key={category.id}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleSaveToCategory(category.id);
                    }}
                    disabled={isReacting}
                    className={`
                      flex items-center space-x-2 p-2 rounded-lg border transition-all
                      ${isSaved 
                        ? 'bg-white dark:bg-gray-800 border-blue-300 dark:border-blue-600 shadow-sm' 
                        : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-900'
                      }
                      ${isReacting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
                    `}
                    title={isSaved ? `Remove from ${category.name}` : `Save to ${category.name}`}
                  >
                    <img 
                      src={`/${category.id}.png`}
                      alt={`${category.name} icon`}
                      className={`w-4 h-4 object-contain ${isSaved ? 'opacity-100' : 'opacity-75'}`}
                    />
                    <div className="flex flex-col items-start flex-1">
                      <span 
                        className={`font-medium ${isSaved ? 'text-gray-800 dark:text-gray-100' : 'text-gray-700 dark:text-gray-300'}`}
                        style={{ 
                          fontSize: '0.8125rem',
                          lineHeight: '1.35'
                        }}
                      >
                        {category.name}
                      </span>
                      <span 
                        className="text-gray-500 dark:text-gray-400"
                        style={{ 
                          fontSize: '0.75rem',
                          lineHeight: '1.35'
                        }}
                      >
                        {category.description}
                      </span>
                    </div>
                    {isSaved && (
                      <div className="ml-auto">
                        <span 
                          className="bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 px-1.5 py-0.5 rounded-full font-medium"
                          style={{ fontSize: '0.75rem' }}
                        >
                          Saved
                        </span>
                      </div>
                    )}
                  </button>
                );
              })}
            </div>

            {/* Vibe App Canvas (if attached) */}
            {cherry.vibe?.app && (
              <VibeEmbedded cherry={cherry} />
            )}

            {/* Follow Bot Button */}
            {isBotContent && onFollowBot && (
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  onFollowBot(botName);
                }}
                className="w-full bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-900 text-gray-700 dark:text-gray-300 font-medium py-2 px-3 rounded-lg border border-gray-200 dark:border-gray-700 transition-colors flex items-center justify-center space-x-1"
                style={{ fontSize: '0.8125rem' }}
              >
                <UserPlus className="w-3 h-3" />
                <span>Follow {botName}</span>
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function VibeEmbedded({ cherry }: { cherry: any }) {
  const [fullscreen, setFullscreen] = React.useState(false);
  const firstRef = React.useRef<HTMLButtonElement>(null);
  const lastRef = React.useRef<HTMLButtonElement>(null);

  React.useEffect(() => {
    function onKey(e: KeyboardEvent) {
      if (e.key === 'Escape' && fullscreen) setFullscreen(false);
    }
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, [fullscreen]);

  React.useEffect(() => {
    if (fullscreen) firstRef.current?.focus();
  }, [fullscreen]);

  const source = cherry.vibe.app.provider === 'remote-url'
    ? (cherry.vibe.app.embed_url ? new URL(cherry.vibe.app.embed_url).host : 'remote')
    : (cherry.vibe.app.npm_pkg || 'npm');

  return (
    <section className="mt-4 space-y-2" aria-label={`Vibe App: ${cherry.vibe.app.name}`}>
      <div className="flex items-center justify-between">
        <VibeBadge source={source} />
        <button
          onClick={(e) => { e.stopPropagation(); setFullscreen((v) => !v); }}
          className="inline-flex items-center gap-2 rounded-md border border-white/10 bg-white/5 px-2 py-1 text-xs text-white hover:bg-white/10"
          title={fullscreen ? 'Exit fullscreen' : 'Fullscreen'}
        >
          {fullscreen ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
          <span className="hidden sm:inline">{fullscreen ? 'Exit' : 'Fullscreen'}</span>
        </button>
      </div>

      {!fullscreen && (
        <VibeCanvas
          app={cherry.vibe.app}
          initialProps={cherry.vibe.props}
          posterUrl={cherry.vibe.poster_url}
          aspect={cherry.vibe.aspect}
          className="mt-1"
        />
      )}
      {cherry.vibe.caption && !fullscreen && (
        <p className="text-sm text-gray-700 dark:text-white/70">{cherry.vibe.caption}</p>
      )}

      {fullscreen && (
        <div className="fixed inset-0 z-[100]" role="dialog" aria-modal="true">
          <div className="absolute inset-0 bg-black/70" onClick={() => setFullscreen(false)} aria-hidden></div>
          <div className="relative mx-auto flex h-full w-full max-w-7xl flex-col p-3">
            <div className="mb-2 flex items-center justify-between text-white">
              <div className="text-sm opacity-80">Vibe App: {cherry.vibe.app.name}</div>
              <button ref={firstRef} onClick={() => setFullscreen(false)} className="rounded-md border border-white/10 bg-white/10 px-2 py-1 text-xs hover:bg-white/20" aria-label="Close vibe fullscreen">
                <X className="h-4 w-4" aria-hidden />
              </button>
            </div>
            <div className="flex-1 overflow-hidden rounded-lg border border-white/10 bg-black">
              <VibeCanvas
                app={cherry.vibe.app}
                initialProps={cherry.vibe.props}
                posterUrl={cherry.vibe.poster_url}
                aspect={cherry.vibe.aspect}
                className="h-full w-full"
                fullHeight
              />
            </div>
            {cherry.vibe.caption && (
              <p className="mt-2 text-sm text-white/80">{cherry.vibe.caption}</p>
            )}
            {/* Focus trap sentinel */}
            <button ref={lastRef} onClick={() => firstRef.current?.focus()} className="sr-only">end</button>
          </div>
        </div>
      )}
    </section>
  );
}
