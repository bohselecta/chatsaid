              {!preview ? (
                <textarea
                  value={body}
                  onChange={(e) => setBody(e.target.value)}
                  placeholder="Write your cherry… Markdown supported (basic)"
                  className="h-full w-full resize-none bg-transparent p-4 text-sm text-white outline-none"
                  aria-label="Body"
                />
              ) : (
                <div className="prose prose-invert max-w-none p-4 text-white/90">
                  <PreviewSimple text={body} />
                </div>
              )}
            </div>
          </div>

          {/* Docked assistant */}
          <div className="w-[360px] max-w-[50vw] border-l border-white/10 bg-white/[0.03] backdrop-blur">
            <div className="border-b border-white/10 px-3 py-2 text-sm font-medium text-white/90">Assistant</div>
            <div className="flex max-h-full min-h-0 flex-1 flex-col">
              <div className="flex-1 space-y-2 overflow-y-auto p-3">
                {messages.map((m) => (
                  <div key={m.id} className={`max-w-[85%] rounded-md px-3 py-2 text-sm ${m.role === 'user' ? 'ml-auto bg-rose-500 text-white' : m.role === 'system' ? 'bg-gray-700 text-gray-200' : 'bg-gray-800 text-gray-200'}`}>
                    {m.content}
                  </div>
                ))}
                {messages.length === 0 && (
                  <div className="text-xs text-white/50">Ask for title help, outline, or a tighter draft.</div>
                )}
              </div>
              <form
                onSubmit={(e) => { e.preventDefault(); void sendAssistant(); }}
                className="border-t border-white/10 p-2"
              >
                <div className="flex items-center gap-2">
                  <input
                    value={assistantInput}
                    onChange={(e) => setAssistantInput(e.target.value)}
                    placeholder="Ask the assistant…"
                    className="flex-1 rounded-md border border-white/10 bg-white/5 px-3 py-2 text-sm text-white placeholder-white/40 outline-none focus:ring-2 focus:ring-rose-400/30"
                    aria-label="Assistant input"
                  />
                  <button className="rounded-md bg-rose-500 px-3 py-2 text-sm text-white hover:bg-rose-500/90">Send</button>
                </div>
              </form>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}

function PreviewSimple({ text }: { text: string }) {
  // Very small markdown-ish preview without extra deps
  const html = useMemo(() => {
    const esc = (s: string) => s.replace(/[&<>]/g, (c) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;' }[c] as string));
    const lines = text.split(/\n/);
    const out: string[] = [];
    for (const ln of lines) {
      if (/^\s*#\s+/.test(ln)) { out.push(`<h2>${esc(ln.replace(/^\s*#\s+/, ''))}</h2>`); continue; }
      if (/^\s*##\s+/.test(ln)) { out.push(`<h3>${esc(ln.replace(/^\s*##\s+/, ''))}</h3>`); continue; }
      // inline: **bold**, *italic*, `code`
      let t = esc(ln);
      t = t.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
      t = t.replace(/\*(.+?)\*/g, '<em>$1</em>');
      t = t.replace(/`([^`]+)`/g, '<code>$1</code>');
      // links [text](url)
      t = t.replace(/\[([^\]]+)\]\((https?:[^\)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
      out.push(`<p>${t || '&nbsp;'}</p>`);
    }
    return out.join('\n');
  }, [text]);
  return <div dangerouslySetInnerHTML={{ __html: html }} />;
}
