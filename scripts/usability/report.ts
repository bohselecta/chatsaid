import fs from 'node:fs/promises';
import fsSync from 'node:fs';
import path from 'node:path';
import { z } from 'zod';

const OUTDIR = 'reports/usability';

const PageSchema = z.object({
  title: z.string(),
  links: z.array(z.string()),
  headings: z.array(z.string()),
  landmarks: z.array(z.string()),
  a11y: z.any(),
});

function fileExists(p: string) {
  try {
    return fsSync.statSync(p).isFile();
  } catch {
    return false;
  }
}

async function main() {
  const raw = await fs.readFile(path.join(OUTDIR, 'graph.json'), 'utf8');
  const graph = JSON.parse(raw) as Record<string, unknown>;

  const pages = Object.entries(graph).map(([route, data]) => ({ route, ...PageSchema.parse(data) }));

  const edges = pages.flatMap((p) => p.links.filter((l) => l.startsWith('/')).map((l) => [p.route, l] as const));
  const nodes = new Set(pages.map((p) => p.route));
  const indeg = new Map<string, number>(Array.from(nodes).map((n) => [n, 0]));
  for (const [, to] of edges) indeg.set(to, (indeg.get(to) || 0) + 1);

  const orphanRoutes = Array.from(nodes).filter((n) => indeg.get(n)! === 0 && n !== '/' && n !== '/canopy');

  const a11yTotals = pages.reduce(
    (acc, p) => {
      const v = (p as any).a11y?.violations?.length ?? 0;
      acc.total += v;
      if (v) acc.byRoute[p.route] = v;
      return acc;
    },
    { total: 0, byRoute: {} as Record<string, number> }
  );

  const authlessOnly = process.env.AUTHLESS_ONLY === '1';
  const expectedPublic = ['/', '/canopy', '/explore', '/branch/funny', '/branch/mystical', '/branch/technical', '/branch/research', '/branch/ideas', '/about', '/help'];
  const expectedAuth = ['/profile', '/settings', '/mindmap', '/bot-twin'];
  const expected = authlessOnly ? expectedPublic : [...expectedPublic, ...expectedAuth];
  const missing = expected.filter((r) => !nodes.has(r));

  // === AUTO-SCAFFOLD (opt-in via SCAFFOLD=1) ===============================
  const DO_SCAFFOLD = process.env.SCAFFOLD === '1';
  if (DO_SCAFFOLD && missing.length) {
    for (const r of missing) {
      if (!/^\/[a-z0-9\-]+$/i.test(r)) continue;
      const seg = r.replace(/^\//, '');
      const dir = path.join('app', seg);
      const file = path.join(dir, 'page.tsx');
      if (!fileExists(file)) {
        await fs.mkdir(dir, { recursive: true });
        const title = seg.charAt(0).toUpperCase() + seg.slice(1);
        const stub = `export const metadata = { title: "${title} • ChatSaid" }\n\nexport default function Page(){return (\n  <main className=\"mx-auto max-w-5xl p-6 text-white\">\n    <nav className=\"text-sm text-white/60 mb-4\">\n      <a href=\"/canopy\" className=\"hover:underline\">Canopy</a>\n      <span className=\"px-2\">/</span>\n      <span className=\"text-white/80\">${seg}</span>\n    </nav>\n    <h1 className=\"text-3xl font-bold mb-2\">${title}</h1>\n    <p className=\"text-white/70 mb-6\">Stub page generated by the Usability Bot. Replace this copy with real content.</p>\n    <section className=\"space-y-3\">\n      <div className=\"rounded-lg border border-white/10 bg-white/5 p-4\">\n        <h2 className=\"font-semibold mb-1\">What belongs here?</h2>\n        <ul className=\"list-disc ml-5 text-white/80\">\n          <li>Describe the purpose of this page in 1–2 sentences.</li>\n          <li>Add relevant links or components.</li>\n          <li>Wire into header/footer/mobile nav if appropriate.</li>\n        </ul>\n      </div>\n    </section>\n  </main>\n)}\n`;
        await fs.writeFile(file, stub);
        console.log(`[ua] Scaffolded ${file}`);
      }
    }
  }
  // ========================================================================

  const md = `# ChatSaid Usability Report\n\n` +
    `## Summary\n` +
    `- Pages crawled: ${pages.length}\n` +
    `- A11y violations (axe): ${a11yTotals.total}\n` +
    `- Orphan routes (no internal links pointing to them): ${orphanRoutes.length}\n` +
    `- Missing key routes (from product model): ${missing.length}\n\n` +
    `## Missing / Candidate Routes\n` +
    (missing.map((r) => `- ${r}`).join('\n') || '- none') + '\n\n' +
    `## Orphan Routes\n` +
    (orphanRoutes.length ? orphanRoutes.map((r) => `- ${r}`).join('\n') : '- none') + '\n\n' +
    `## Top A11y Offenders (by violations)\n` +
    Object.entries(a11yTotals.byRoute).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([r, c]) => `- ${r}: ${c}`).join('\n') + '\n\n' +
    `## Navigation Notes\n` +
    `- Ensure all branch pages are reachable from header, footer, and mobile drawer.\n` +
    `- Add current-route highlight to header rail and drawer (if missing).\n` +
    `- Provide a visible persistent search in global header (md+) and inside drawer (sm).\n\n` +
    `## Recommended Tickets\n` +
    (missing.map((r) => `- feat(nav): add route & link for ${r}`).join('\n') || '- none') + '\n' +
    (orphanRoutes.length ? orphanRoutes.map((r) => `- fix(nav): link to orphan route ${r} from appropriate surfaces`).join('\n') : '') + '\n';

  await fs.mkdir('reports', { recursive: true });
  await fs.writeFile(path.join('reports', 'usability.md'), md);
  await fs.writeFile(path.join('reports', 'ia-graph.json'), JSON.stringify({ nodes: Array.from(nodes), edges }, null, 2));

  const tasks = `# TASKS_USABILITY.md\n\n- [ ] Review reports/usability.md and screenshots in reports/usability\n- [ ] Implement missing routes listed under \"Recommended Tickets\"\n- [ ] Fix A11y issues on top offenders (see list)\n- [ ] Add links to orphans from header/footer/drawer as appropriate\n- [ ] Verify route highlights and persistent search across viewports\n`;
  await fs.writeFile('TASKS_USABILITY.md', tasks);

  if (DO_SCAFFOLD && missing.length) {
    await fs.appendFile('TASKS_USABILITY.md', '\n- [ ] Replace copy on scaffolded pages and hook them into header/footer/mobile nav\n');
  }

  console.log(`[ua] Report generated → reports/usability.md`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
